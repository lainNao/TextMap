

＜バグ？＞	
	・たまに一番最初をデフォ位置でノード作った後、別位置にマウス動かしてノード作ると最初のが消えるバグある
		・というかそれより酷くて、infoGroupの表示も消えたわ。なんだこれ。付け焼き刃でもいいから処理したいわ
		・そうなったらバグリ続けて、新しいタブで開き直さないと何故か治らない

	・ブラウザ拡大率が100%以外のときにサイトに入ってきたら（またはf5で更新したらも？）infoGroupの表示がバグる
		・これは無理やろ。直せたら神
		・これがバレるの辛いから最初からノードや文字の大きさを自分用にキャリブレーションしておくかな。調整してこうなりたくないし

	・defHeightInfoとかdefWidthInfoとかのelemを取得せずに直接IDでoninputとかやってるけどできてるのはなぜ…？
	
＜追加機能案＞
	・もし新種のバグが発覚したときのために、f5キー押したらファイル保存的なことをする
		・f5防止も兼ねて

	・ノード削除機能をつける（どんな動作に紐付けるかは…どうしようね…）
		・指定idが現在のdomにあるならdomからも消す
		・dir_listのcontain_idsからも消す
		・線とかも消す
		的な処理ってすでにあったよな？あれをやればいいのでは？使いまわせる予感すぐにできそうな予感
	
	・線を削除する機能
		・これは必須に近い気がする
		・これは「すでに線がつながってるやつ同士で右ドラッグしたら線が消える」という仕様にすればいい
		
	・間違って削除したノードを復活させる、戻る機能あればいいけど、これ大変だな…
		・消すな！！
		・ゴミ箱ノードでも各自で作れや！！！ﾜﾗｵ
	
	・右ドラッグしたら範囲内複数選択（またはctrl + 左クリックでも複数選択可能）
		・一斉選択されてるのを左ドラッグしたら一気に動かせる
			・複数選択状態でノードにド左ロップした場合、そのノード内に一斉に入る
		・複数選択状態でノードに右ドロップした場合、そのノードに全部線が繋がる

	・データ防御機能
		・あと間違って更新ボタン押しちゃってマインドマップが消えちゃった！うわー！ってならないように、f5押したら強制保存するとか、f5をpreventDefaultするとか、確認画面出すとかしたほうがいい

	・接続元と先を明らかにする
		・フォーカス合ってる時にfromからtoへと丸図形が移動するとかなんかするようにしたほうが本来いい（on/off可能にして）
		
＜スタイルの提案＞

	・スペース押しっぱにすると大量にノードを作成できるので、押しっぱを防止するとか

	・どっかにエクスプローラーを出せるようにして、そっから移動できるようにする（特にファイルドロップした時にそっから選択できるほうがいいかも）
		・エクスプローラー表示ボタンを押したら右からフォン…ってモーダルウィンドウ上のエクスプローラーが出てくるとか
			けっこう階層深くなる場合もあるから、そのモーダルウィンドウはど真ん中に出ていいと思う。（いや、左側とかのほうがいいか）

	・ウィンドウのあれこれ
		・ズームしたらデフォだと左上にズームされるから、マウス位置にズームされるように、「moveTo(x,y)」で無理やりマウス位置に移動させるようにできないかな

	・その他infoValuesのあれこれ
		・inputの幅をもう少し狭めて
		・編集可能なやつとそうでないやつの見分けがつかないのでつくようにしたほうがいいかな
		
	・フォーカスのオンオフとか調整しようがある
		・例えば右ドラッグ完了時
			・直前にノードを作成していたらフォーカスは失う
			・直前にノードに文字を打っていたならそこにフォーカスが戻る
		・後でここはどうにかする

	・ctrl + マウスホイールすると拡大縮小できるけど、その間にノードにマウスが乗るとそこに入ったり、というか出たりしちゃうから、そこを防止する
		・マウスホイールの関数内でctrl押してる時はにそこらへんを全部無効化する
		
	・ドラッグ中にマウス周辺に黄色い半透明の円出すのはいいと思う

＜あえてやらない＞
	■ノードの自動リサイズ（文字の量により自動で高さをmax-height上限まで広げる）
		・なぜやらないのかは、総合的に考えて「勝手にmax-heightまで広がると、形を好きにスタイリングしづらい」から
		・個人的に、文字を打ち込みやすいかどうかより、スタイリングのしやすさ（ノードお大きさを自分で制御できること）の方が大事
		・考えたけど辞めた

	■dirでないノードにも名前をつけること
		・contentのテキストに加えて別の文字列を入力するのは、ちょっとシンプルじゃないと思った
		・名前をつけられるのはあくまでもpath表示の利便性を上げるためであってノード時代に名前をつけるのはちょっと違うかな微妙だけど、と思った
		・いやノードに名前つけれたほうが簡潔にはなりそうだけど、でもそしたら各ノードに名前つけたくなる気がして…
		・基本的にノードは無名で、dir化したものだけ束ねる際の名前を持つ感じにしてるけど、うーんそれでいいのかな
		・この仕様変えたら、互換性失われるな。データ変換プログラム作ってjsonを書き直せば移行できなくもないけど。

	■リサイズ直後のワンクリック無反応への対処
		・resize直後に右上に○〜○的な表示残っている状態だとクリックイベントが一回無効になるから、それを防止するために一つ無理やりクリックイベント発火させるかな
		・と思っていたんだけど、無理だわ。
		・いやできるか。nowResizingがtrueの時にマウスが画面上を動かされたらワンクリック発火するとか。
		・できるっぽいかな？
		・でもやっぱりやんないでいいわ。一瞬だし。いらんわ。

＜プログラム改善案＞
	・transformしてるの個別にやってるから、transformする要素を統一しよう一つに。そうしたら無駄な処理がたぶんだいぶ減る。まあこれは後ででいいかな
	・Numberが乱立してる（parseIntは「px」を無視して数値化するために有効活用しているからいいとして。）
	・|0が乱立してる
	・あともっと右側に表示を出す
	・コーディング規約がバラバラすぎてる
	・オブジェクトを代入してるのはやばいのでもしそういうことしてるのがあればObject.assignに直したりする
	・.noteのtransform:の前にtransform的な名前がつくプロパティがあるとそこで書き換えられてバグりうるのでよくない（cssRewirte的な関数の正規表現が甘い）
	
＜メモ＞	
	・mousedragするだけで　dir_listのmoved_positionが勝手に各dirが連動して書き換わりまくるというバグがあったけど、
			moved_position  = {"x": (moved_position.x + e.movementX), "y":(moved_position.y + e.movementY) }
		とすることで書き換わりまくるという症状は消えた。
		でもドラッグするとやっぱりdir_listの中身が、値は変わらないけど、同じ値が入れ替わりまくってるのは分かる（代入されてる時の色変化するから）
		ってことはやっぱmoved_positionが書き換わると強制的にdir_listにも繋がる…？なんだこれは
		ドラッグする度にいちいちdir_list更新されたら処理無駄だからこれ解消したいな…
		
	
	・ソートアルゴリズムは工夫しがいがあるので時間あれば考える
	

＜保存してるデータ構造＞
{
	node_list:[
		{
			id:			ノードID
			parent_id	所属する親ノードid（id 0ならこれはnullとする）
			is_dir:		trueかfalse
			content:	テキスト内容
			left:
			top:
			width:
			height:
			to:		
			from:		
	
		}
	],
	dir_list:[
		{
			id:								ノードidを入れる
			name:							ディレクトリ名を任意で入れる（デフォはノードid）
			parent_id:						親ノードid
			contain_ids:[]					保持してるノード達のid
			moved_position:					moved_positionを入れる
			def_node_size:{width:,height:}	そのdirのデフォルトのノードサイズ
		}
	],
	max_id:最高ID（ダウンロード時にnode_id_cntを入れておく）
}





		
	
	*/